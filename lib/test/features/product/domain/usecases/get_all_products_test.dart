import 'package:dartz/dartz.dart';
import 'package:flutter_enterprise_app/core/utils/failure.dart';
import 'package:flutter_enterprise_app/core/utils/usecase.dart';
import 'package:flutter_enterprise_app/features/product/domain/entities/product.dart';
import 'package:flutter_enterprise_app/features/product/domain/repositories/product_repository.dart';
import 'package:flutter_enterprise_app/features/product/domain/usecases/get_all_products.dart';
import 'package:flutter_test/flutter_test.dart';
import 'package:mockito/annotations.dart';
import 'package:mockito/mockito.dart';

// This file will be generated by running build_runner
import 'get_all_products_test.mocks.dart';

// Unit test for business logic [cite: 33]
@GenerateMocks([ProductRepository])
void main() {
  late GetAllProducts usecase;
  late MockProductRepository mockProductRepository;

  setUp(() {
    mockProductRepository = MockProductRepository();
    usecase = GetAllProducts(mockProductRepository);
  });

  final tProductsList = [
    const Product(
      id: 1,
      title: 'Test Product',
      price: 9.99,
      description: 'Desc',
      category: 'cat',
      image: 'img.png',
    ),
  ];

  test('should get list of products from the repository', () async {
    // Arrange
    when(mockProductRepository.getAllProducts())
        .thenAnswer((_) async => Right(tProductsList));

    // Act
    final result = await usecase(NoParams());

    // Assert
    expect(result, Right(tProductsList));
    verify(mockProductRepository.getAllProducts());
    verifyNoMoreInteractions(mockProductRepository);
  });

  test('should return a ServerFailure when the repository call fails', () async {
    // Arrange
    when(mockProductRepository.getAllProducts())
        .thenAnswer((_) async => Left(ServerFailure()));

    // Act
    final result = await usecase(NoParams());

    // Assert
    expect(result, Left(ServerFailure()));
    verify(mockProductRepository.getAllProducts());
    verifyNoMoreInteractions(mockProductRepository);
  });
}